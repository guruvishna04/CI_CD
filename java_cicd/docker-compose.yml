version: '3.7'

networks:
  monitor-net:
    driver: bridge

volumes:
    prometheus_data: {}
    grafana_data: {}
    # sonarqube_conf:
    # sonarqube_data:
    # sonarqube_extensions:
    # sonarqube_bundled-plugins:
    postgresql:
    postgresql_data:
    nexus-data:

services:

  prometheus:
    image: prom/prometheus:v2.16.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    ports:
      - "19090:9090"
    

  alertmanager:
    image: prom/alertmanager:v0.20.0
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    ports:
      - "19093:9093"

  nodeexporter:
    image: prom/node-exporter:v0.18.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    ports:
      - "19100:9100"

  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.34.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    ports:
      - "18080:8080"

  grafana:
    image: grafana/grafana:6.6.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    ports:
      - "3000:3000"

  pushgateway:
    image: prom/pushgateway:v1.1.0
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    ports:
      - "19091:9091"

  # caddy:
  #   image: stefanprodan/caddy
  #   container_name: caddy
  #   ports:
  #     - "3000:3000"
  #     - "9095:9095"
  #     - "9093:9093"
  #     - "9091:9091"
  #     - "9000:9095"
  #     - "8081:8081"
  #     - "5000:5000"
  #   volumes:
  #     - ./caddy:/etc/caddy
  #   environment:
  #     - ADMIN_USER=${ADMIN_USER:-admin}
  #     - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
  #   restart: unless-stopped
  #   networks:
  #     - monitor-net
  #   labels:
  #     org.label-schema.group: "monitoring"

  sonarqube:
    restart: unless-stopped
    image: sonarqube
    container_name: sonarqube
    expose:
      - 9000
    networks:
      - monitor-net
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
    volumes:
      - ./sonarqube_conf:/opt/sonarqube/conf
      - ./sonarqube_data:/opt/sonarqube/data
      - ./sonarqube_extensions:/opt/sonarqube/extensions
      - ./sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
    ports:
      - "19000:9000"
      - "19002:9002"
    depends_on:
      - sonardb

  sonardb:
    image: postgres
    container_name: sonardb
    networks:
      - monitor-net
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    ports:
      - "5432:5432"
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

  jenkins:
    restart: unless-stopped
    build: 
      context: ./jenkins/build/
      # args:
      #   dockergroupid: ${DOCKER_GROUP_ID}
    image: guruvishna04/jenkins_fev:beta
    container_name: jenkins
    volumes:
      - ./jenkins/jenkins_home:/var/jenkins_home
      # - /etc/localtime:/etc/localtime:ro
      # #specific volumes
      # - /home/ubuntu/dockerImages:/home/ubuntu/dockerImages
      # - built_jars:/home/ubuntu/shared/jars
      # #docker volumes
      # - /usr/bin/docker:/usr/bin/docker
      # - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitor-net
    ports:
      - "28080:8080"
      - "50000:50000"
    environment:
      - NEXUS_PORT=18081
      - SONAR_PORT=9000
      - SONAR_DB_PORT=5432
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '4'
    #       memory: 12g
    #     reservations:
    #       cpus: '2'
    #       memory: 8g
  
  nexus:
    container_name: nexus
    image: sonatype/nexus3
    restart: always
    expose:
      - 8081
    ports:
      - "18081:8081"
    networks:
      - monitor-net
    volumes:
      - nexus-data:/nexus-data

  